
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD DIV MUL QU REMOFDIV SUB TkBool TkCloseBlock TkCloseBracket TkCloseCall TkColon TkComma TkDirective TkIdentifier TkOpenBlock TkOpenBracket TkOpenCall TkReplace TkSemicolon TkValue TkVarunit : \n            | declaration body\n            | declaration body unitdeclaration : TkDirective TkIdentifier\n                   | TkIdentifierbody : TkOpenBlock sentences TkCloseBlocksentences : sentence TkSemicolon\n                 | sentence TkSemicolon sentencessentence : condExpr\n                | condExpr rightpart\n                | leftpart rightpartleftpart : \n                | patterncondExpr : pattern condition condition : TkComma result TkColon condPatterncondPattern : TkOpenBlock sentences TkCloseBlock\n                   | patternpattern : TkVar \n               | TkValue \n               | TkBool\n               | TkBool pattern\n               | TkVar pattern\n               | bracketArgs\n               | bracketArgs pattern\n               | TkValue patternrightpart : TkReplace\n                 | TkReplace resultresult : \n              | TkVar \n              | TkValue \n              | TkBool\n              | TkVar result\n              | TkValue result\n              | bracketArgs\n              | bracketArgs result\n              | call result TkCloseCall\n              | call result TkCloseCall resultbracketArgs : TkOpenBracket arg TkCloseBracket\n                   | TkOpenBracket arg TkCloseBracket bracketArgsarg : \n           | TkVar\n           | TkValue\n           | TkVar arg\n           | TkValue arg\n           | bracketArgs arg\n           | argBracketArg arg\n           | call arg TkCloseCall\n           | call arg TkCloseCall argargBracketArg : arg bracketArgscall : TkOpenCall TkIdentifier \n               | TkOpenCall ADD\n               | TkOpenCall SUB\n               | TkOpenCall MUL\n               | TkOpenCall DIV\n               | TkOpenCall REMOFDIV\n               | TkOpenCall QU'
    
_lr_action_items = {'$end':([0,1,5,8,19,],[-1,0,-1,-3,-6,]),'TkDirective':([0,5,19,],[3,3,-6,]),'TkIdentifier':([0,3,5,19,36,],[4,7,4,-6,52,]),'TkOpenBlock':([2,4,7,63,],[6,-5,-4,68,]),'TkReplace':([6,11,12,13,14,15,16,17,20,24,26,27,28,29,45,64,67,68,69,73,],[-12,22,22,-13,-18,-19,-20,-23,-12,-14,-22,-25,-21,-24,-38,-39,-15,-12,-17,-16,]),'TkVar':([6,14,15,16,17,18,20,22,25,31,32,33,34,35,39,40,42,43,45,46,52,53,54,55,56,57,58,63,64,65,66,68,],[14,14,14,14,14,32,14,39,39,32,32,32,32,32,39,39,39,39,-38,-49,-50,-51,-52,-53,-54,-55,-56,14,-39,32,39,14,]),'TkValue':([6,14,15,16,17,18,20,22,25,31,32,33,34,35,39,40,42,43,45,46,52,53,54,55,56,57,58,63,64,65,66,68,],[15,15,15,15,15,33,15,40,40,33,33,33,33,33,40,40,40,40,-38,-49,-50,-51,-52,-53,-54,-55,-56,15,-39,33,40,15,]),'TkBool':([6,14,15,16,17,20,22,25,39,40,42,43,45,52,53,54,55,56,57,58,63,64,66,68,],[16,16,16,16,16,16,41,41,41,41,41,41,-38,-50,-51,-52,-53,-54,-55,-56,16,-39,41,16,]),'TkOpenBracket':([6,14,15,16,17,18,20,22,25,30,31,32,33,34,35,39,40,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,64,65,66,68,70,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-49,18,18,18,18,18,-50,-51,-52,-53,-54,-55,-56,18,-39,18,18,18,18,]),'TkCloseBlock':([9,20,37,72,],[19,-7,-8,73,]),'TkSemicolon':([10,11,14,15,16,17,21,22,23,24,26,27,28,29,38,39,40,41,42,45,59,60,61,64,66,67,69,71,73,],[20,-9,-18,-19,-20,-23,-10,-26,-11,-14,-22,-25,-21,-24,-27,-28,-28,-31,-28,-38,-32,-33,-35,-39,-28,-15,-17,-37,-16,]),'TkComma':([13,14,15,16,17,26,27,28,29,45,64,],[25,-18,-19,-20,-23,-22,-25,-21,-24,-38,-39,]),'TkCloseBracket':([18,30,31,32,33,34,45,46,47,48,49,50,64,65,70,],[-40,45,-40,-40,-40,-40,-38,-49,-45,-43,-44,-46,-39,-40,-48,]),'TkOpenCall':([18,22,25,31,32,33,34,35,39,40,42,43,45,46,52,53,54,55,56,57,58,64,65,66,],[36,36,36,36,36,36,36,36,36,36,36,36,-38,-49,-50,-51,-52,-53,-54,-55,-56,-39,36,36,]),'TkColon':([25,39,40,41,42,44,45,59,60,61,64,66,71,],[-28,-28,-28,-31,-28,63,-38,-32,-33,-35,-39,-28,-37,]),'TkCloseCall':([31,32,33,34,35,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,70,71,],[-40,-40,-40,-40,-40,-28,-28,-31,-28,-28,-38,-49,-45,-43,-44,-46,65,-50,-51,-52,-53,-54,-55,-56,-32,-33,-35,66,-39,-40,-28,-48,-37,]),'ADD':([36,],[53,]),'SUB':([36,],[54,]),'MUL':([36,],[55,]),'DIV':([36,],[56,]),'REMOFDIV':([36,],[57,]),'QU':([36,],[58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'unit':([0,5,],[1,8,]),'declaration':([0,5,],[2,2,]),'body':([2,],[5,]),'sentences':([6,20,68,],[9,37,72,]),'sentence':([6,20,68,],[10,10,10,]),'condExpr':([6,20,68,],[11,11,11,]),'leftpart':([6,20,68,],[12,12,12,]),'pattern':([6,14,15,16,17,20,63,68,],[13,26,27,28,29,13,69,13,]),'bracketArgs':([6,14,15,16,17,18,20,22,25,30,31,32,33,34,35,39,40,42,43,45,47,48,49,50,51,63,65,66,68,70,],[17,17,17,17,17,31,17,42,42,46,31,31,31,31,31,42,42,42,42,64,46,46,46,46,46,17,31,42,17,46,]),'rightpart':([11,12,],[21,23,]),'condition':([13,],[24,]),'arg':([18,31,32,33,34,35,65,],[30,47,48,49,50,51,70,]),'argBracketArg':([18,31,32,33,34,35,65,],[34,34,34,34,34,34,34,]),'call':([18,22,25,31,32,33,34,35,39,40,42,43,65,66,],[35,43,43,35,35,35,35,35,43,43,43,43,35,43,]),'result':([22,25,39,40,42,43,66,],[38,44,59,60,61,62,71,]),'condPattern':([63,],[67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> unit","S'",1,None,None,None),
  ('unit -> <empty>','unit',0,'p_unit','parser.py',27),
  ('unit -> declaration body','unit',2,'p_unit','parser.py',28),
  ('unit -> declaration body unit','unit',3,'p_unit','parser.py',29),
  ('declaration -> TkDirective TkIdentifier','declaration',2,'p_declaration','parser.py',40),
  ('declaration -> TkIdentifier','declaration',1,'p_declaration','parser.py',41),
  ('body -> TkOpenBlock sentences TkCloseBlock','body',3,'p_body','parser.py',48),
  ('sentences -> sentence TkSemicolon','sentences',2,'p_sentences','parser.py',52),
  ('sentences -> sentence TkSemicolon sentences','sentences',3,'p_sentences','parser.py',53),
  ('sentence -> condExpr','sentence',1,'p_sentence','parser.py',61),
  ('sentence -> condExpr rightpart','sentence',2,'p_sentence','parser.py',62),
  ('sentence -> leftpart rightpart','sentence',2,'p_sentence','parser.py',63),
  ('leftpart -> <empty>','leftpart',0,'p_leftpart','parser.py',70),
  ('leftpart -> pattern','leftpart',1,'p_leftpart','parser.py',71),
  ('condExpr -> pattern condition','condExpr',2,'p_condExpr','parser.py',78),
  ('condition -> TkComma result TkColon condPattern','condition',4,'p_condition','parser.py',82),
  ('condPattern -> TkOpenBlock sentences TkCloseBlock','condPattern',3,'p_condPattern','parser.py',86),
  ('condPattern -> pattern','condPattern',1,'p_condPattern','parser.py',87),
  ('pattern -> TkVar','pattern',1,'p_pattern','parser.py',94),
  ('pattern -> TkValue','pattern',1,'p_pattern','parser.py',95),
  ('pattern -> TkBool','pattern',1,'p_pattern','parser.py',96),
  ('pattern -> TkBool pattern','pattern',2,'p_pattern','parser.py',97),
  ('pattern -> TkVar pattern','pattern',2,'p_pattern','parser.py',98),
  ('pattern -> bracketArgs','pattern',1,'p_pattern','parser.py',99),
  ('pattern -> bracketArgs pattern','pattern',2,'p_pattern','parser.py',100),
  ('pattern -> TkValue pattern','pattern',2,'p_pattern','parser.py',101),
  ('rightpart -> TkReplace','rightpart',1,'p_rightpart','parser.py',110),
  ('rightpart -> TkReplace result','rightpart',2,'p_rightpart','parser.py',111),
  ('result -> <empty>','result',0,'p_result','parser.py',118),
  ('result -> TkVar','result',1,'p_result','parser.py',119),
  ('result -> TkValue','result',1,'p_result','parser.py',120),
  ('result -> TkBool','result',1,'p_result','parser.py',121),
  ('result -> TkVar result','result',2,'p_result','parser.py',122),
  ('result -> TkValue result','result',2,'p_result','parser.py',123),
  ('result -> bracketArgs','result',1,'p_result','parser.py',124),
  ('result -> bracketArgs result','result',2,'p_result','parser.py',125),
  ('result -> call result TkCloseCall','result',3,'p_result','parser.py',126),
  ('result -> call result TkCloseCall result','result',4,'p_result','parser.py',127),
  ('bracketArgs -> TkOpenBracket arg TkCloseBracket','bracketArgs',3,'p_bracketArgs','parser.py',144),
  ('bracketArgs -> TkOpenBracket arg TkCloseBracket bracketArgs','bracketArgs',4,'p_bracketArgs','parser.py',145),
  ('arg -> <empty>','arg',0,'p_arg','parser.py',154),
  ('arg -> TkVar','arg',1,'p_arg','parser.py',155),
  ('arg -> TkValue','arg',1,'p_arg','parser.py',156),
  ('arg -> TkVar arg','arg',2,'p_arg','parser.py',157),
  ('arg -> TkValue arg','arg',2,'p_arg','parser.py',158),
  ('arg -> bracketArgs arg','arg',2,'p_arg','parser.py',159),
  ('arg -> argBracketArg arg','arg',2,'p_arg','parser.py',160),
  ('arg -> call arg TkCloseCall','arg',3,'p_arg','parser.py',161),
  ('arg -> call arg TkCloseCall arg','arg',4,'p_arg','parser.py',162),
  ('argBracketArg -> arg bracketArgs','argBracketArg',2,'p_argBracketArg','parser.py',179),
  ('call -> TkOpenCall TkIdentifier','call',2,'p_call','parser.py',183),
  ('call -> TkOpenCall ADD','call',2,'p_call','parser.py',184),
  ('call -> TkOpenCall SUB','call',2,'p_call','parser.py',185),
  ('call -> TkOpenCall MUL','call',2,'p_call','parser.py',186),
  ('call -> TkOpenCall DIV','call',2,'p_call','parser.py',187),
  ('call -> TkOpenCall REMOFDIV','call',2,'p_call','parser.py',188),
  ('call -> TkOpenCall QU','call',2,'p_call','parser.py',189),
]
