(Node Driven (0 )(()((New )(Grammar )(Negative )(Numeric )(Generic ))()((call (LogAnd 1 )(args (arg (call ((Cont_ab (1 2 ))2 )(args (arg (par e i ))))(call (IsEqual 3 )(args (arg (*(par e i ))(*(call (Repl_a_v 4 )(args (arg (call (Repl_a_v 5 )(args (arg (par e x )))))))))))))))(((assign (var l (1 ))((call ((Cont_ab (1 2 ))2 )(args (arg (par e i )))))))((assign (var l (0 ))((call (LogAnd 1 )(args (arg (var l (1 ))(call (IsEqual 3 )(args (arg (*(par e i ))(*(call (Repl_a_v 4 )(args (arg (call (Repl_a_v 5 )(args (arg (par e x )))))))))))))))))))(Children (Node Driven (0 0 )(((assign (par e i )((par e 1 )fabac(par e 2 ))))((New )(Grammar )(Negative )(Numeric )(Generic ))((Let ((0 0 1 )(assign (par e 67 )()))((0 0 2 )(assign (par e 68 )((par e x ))))In ((call (LogAnd 8 )(args (arg True (call (IsEqual 9 )(args (arg (*(par e 1 )fabac(par e 2 ))(*(call (Repl_a_v 10 )(args (arg (par e 67 )(call ((Repl_a_v (1 2 ))11 )(args (arg (par e 68 )))))))))))))))))()())(Children (Node Driven (0 0 0 )(()((New )(Grammar )(Negative (OR (T)(((par e 67 ))to ((var e Neg1 )fab)))(OR (T)(((par e 67 ))to ((var e Neg1 )fa)))(OR (T)(((par e 67 ))to ((var e Neg1 )f)))(OR (D)(((par e 1 ))to ((var e Neg1 )fabac(var e Neg2 ))))(OR (T)(((par e 338 ))to ((var e Neg1 )fab)))(OR (T)(((par e 338 ))to ((var e Neg1 )fa)))(OR (T)(((par e 338 ))to ((var e Neg1 )f))))(Numeric )(Generic ))()((call (LogAnd 8 )(args (arg True (call (IsEqual 9 )(args (arg (*(par e 1 )fabac(par e 2 ))(*(call (Repl_a_v 10 )(args (arg (par e 67 )(call ((Repl_a_v (1 2 ))11 )(args (arg (par e 68 )))))))))))))))(((assign (var l (8 ))((call ((Repl_a_v (1 2 ))11 )(args (arg (par e 68 )))))))((assign (var l (7 ))((call (Repl_a_v 10 )(args (arg (par e 67 )(var l (8 ))))))))((assign (var l (6 ))((call (IsEqual 9 )(args (arg (*(par e 1 )fabac(par e 2 ))(*(var l (7 )))))))))((assign (var l (0 ))((call (LogAnd 8 )(args (arg True (var l (6 ))))))))))(Children (Node Finished (0 0 0 0 )(((assign (par e 68 )((par e 512 )ab(par e 513 ))))((New )(Grammar )(Negative )(Numeric )(Generic ))((Let ((0 0 0 0 1 )(assign (par e 686 )((par e 67 )(par e 512 )ba)))((0 0 0 0 2 )(assign (par e 687 )((par e 513 ))))In ((call (LogAnd 21 )(args (arg True (call (IsEqual 22 )(args (arg (*(par e 1 )fabac(par e 2 ))(*(call (Repl_a_v 23 )(args (arg (par e 686 )(call ((Repl_a_v (1 2 ))24 )(args (arg (par e 687 )))))))))))))))))()())(Children (Node (Looped To (0 0 0 )With (assign (par e 67 )((par e 686 )))(assign (par e 68 )((par e 687 ))))(0 0 0 0 0 )(()((New )(Grammar )(Negative )(Numeric )(Generic ))()((call (LogAnd 21 )(args (arg True (call (IsEqual 22 )(args (arg (*(par e 1 )fabac(par e 2 ))(*(call (Repl_a_v 23 )(args (arg (par e 686 )(call ((Repl_a_v (1 2 ))24 )(args (arg (par e 687 )))))))))))))))(((assign (var l (0 ))((call (LogAnd 21 )(args (arg True (call (IsEqual 22 )(args (arg (*(par e 1 )fabac(par e 2 ))(*(call (Repl_a_v 23 )(args (arg (par e 686 )(call ((Repl_a_v (1 2 ))24 )(args (arg (par e 687 ))))))))))))))))))))(Node Finished (0 0 0 0 1 )(()((New )(Grammar )(Negative )(Numeric )(Generic ))()((par e 67 )(par e 512 )ba)(((assign (var l (0 ))((par e 67 )(par e 512 )ba))))))(Node Finished (0 0 0 0 2 )(()((New )(Grammar )(Negative )(Numeric )(Generic ))()((par e 513 ))(((assign (var l (0 ))((par e 513 )))))))))(Node Driven (0 0 0 1 )((Always )((New )(Grammar )(Negative (OR (T)(((par e 67 ))to ((var e Neg13 )fab)))(OR (T)(((par e 67 ))to ((var e Neg14 )fa)))(OR (T)(((par e 67 ))to ((var e Neg15 )f)))(OR (D)(((par e 1 ))to ((var e Neg16 )fabac(var e Neg17 ))))(OR (T)(((par e 338 ))to ((var e Neg18 )fab)))(OR (T)(((par e 338 ))to ((var e Neg19 )fa)))(OR (T)(((par e 338 ))to ((var e Neg20 )f)))(OR (D)(((par e 68 ))to ((var e Neg21 )ab(var e Neg22 )))))(Numeric )(Generic ))()((call (LogAnd 8 )(args (arg True (call (IsEqual 9 )(args (arg (*(par e 1 )fabac(par e 2 ))(*(call ((Repl_a_v (1 2 ))10 )(args (arg (par e 67 )(par e 68 ))))))))))))(((assign (var l (7 ))((call ((Repl_a_v (1 2 ))10 )(args (arg (par e 67 )(par e 68 )))))))((assign (var l (6 ))((call (IsEqual 9 )(args (arg (*(par e 1 )fabac(par e 2 ))(*(var l (7 )))))))))((assign (var l (0 ))((call (LogAnd 8 )(args (arg True (var l (6 ))))))))))(Children (Node Undriven (0 0 0 1 0 )(((assign (par e 67 )((par e 719 )ab(par e 720 ))))((New )(Grammar )(Negative (OR (T)(((par e 720 ))to ((var e Neg6 )fab)))(OR (T)(((par e 720 ))to ())(((par e 719 ))to ((var e Neg7 )f)))(OR (T)(((par e 720 ))to ((var e Neg8 )fa)))(OR (T)(((par e 720 ))to ((var e Neg9 )f)))(OR (D)(((par e 1 ))to ((var e Neg10 )fabac(var e Neg11 ))))(OR (T)(((par e 338 ))to ((var e Neg12 )fab)))(OR (T)(((par e 338 ))to ((var e Neg13 )fa)))(OR (T)(((par e 338 ))to ((var e Neg14 )f)))(OR (D)(((par e 68 ))to ((var e Neg15 )ab(var e Neg16 ))))(OR (D)(((par e 719 ))to ((var e Neg17 )ab(var e Neg18 )))))(Numeric )(Generic ))()((call (LogAnd 8 )(args (arg True (call (IsEqual 9 )(args (arg (*(par e 1 )fabac(par e 2 ))(*(par e 719 )ba(call (Repl_a_v 26 )(args (arg (par e 720 )(par e 68 ))))))))))))(((assign (var l (6 ))((call (IsEqual 9 )(args (arg (*(par e 1 )fabac(par e 2 ))(*(par e 719 )ba(call (Repl_a_v 26 )(args (arg (par e 720 )(par e 68 )))))))))))((assign (var l (0 ))((call (LogAnd 8 )(args (arg True (var l (6 )))))))))))(Node Undriven (0 0 0 1 1 )(((assign (par e 67 )((par e 719 )a))(assign (par e 68 )(b(par e 721 ))))((New )(Grammar )(Negative (OR (T)(((par e 719 ))to ((var e Neg25 )f)))(OR (D)(((par e 1 ))to ((var e Neg26 )fabac(var e Neg27 ))))(OR (T)(((par e 338 ))to ((var e Neg28 )fab)))(OR (T)(((par e 338 ))to ((var e Neg29 )fa)))(OR (T)(((par e 338 ))to ((var e Neg30 )f)))(OR (D)(((par e 721 ))to ((var e Neg32 )ab(var e Neg33 ))))(OR (D)(((par e 719 ))to ((var e Neg40 )ab(var e Neg41 )))))(Numeric )(Generic ))()((call (LogAnd 8 )(args (arg True (call (IsEqual 9 )(args (arg (*(par e 1 )fabac(par e 2 ))(*(par e 719 )ba(call (Repl_a_v 27 )(args (arg (par e 721 ))))))))))))(((assign (var l (6 ))((call (IsEqual 9 )(args (arg (*(par e 1 )fabac(par e 2 ))(*(par e 719 )ba(call (Repl_a_v 27 )(args (arg (par e 721 )))))))))))((assign (var l (0 ))((call (LogAnd 8 )(args (arg True (var l (6 )))))))))))(Node Undriven (0 0 0 1 2 )((Always )((New )(Grammar )(Negative (OR (T)(((par e 67 ))to ((var e Neg75 )fa)))(OR (T)(((par e 67 ))to ((var e Neg76 )f)))(OR (D)(((par e 1 ))to ((var e Neg77 )fabac(var e Neg78 ))))(OR (T)(((par e 338 ))to ((var e Neg79 )fab)))(OR (T)(((par e 338 ))to ((var e Neg80 )fa)))(OR (T)(((par e 338 ))to ((var e Neg81 )f)))(OR (D)(((par e 68 ))to ((var e Neg82 )ab(var e Neg83 ))))(OR (D)(((par e 67 ))to ((var e Neg84 )ab(var e Neg85 ))))(OR (T)(((par e 67 ))to ((var e Neg86 )a))(((par e 68 ))to (b(var e Neg87 )))))(Numeric )(Generic ))()((call (LogAnd 8 )(args (arg True (call (IsEqual 9 )(args (arg (*(par e 1 )fabac(par e 2 ))(*(par e 67 )(par e 68 )))))))))(((assign (var l (6 ))((call (IsEqual 9 )(args (arg (*(par e 1 )fabac(par e 2 ))(*(par e 67 )(par e 68 ))))))))((assign (var l (0 ))((call (LogAnd 8 )(args (arg True (var l (6 )))))))))))))))(Node Undriven (0 0 1 )(()((New )(Grammar )(Negative (OR (D)(((par e 67 ))to ((var e Neg1 )fabac(var e Neg2 ))))(OR (T)(((par e 67 ))to ((var e Neg1 )fab)))(OR (T)(((par e 67 ))to ((var e Neg1 )fa)))(OR (T)(((par e 67 ))to ((var e Neg1 )f))))(Numeric )(Generic ))()()(((assign (var l (0 ))())))))(Node Undriven (0 0 2 )(()((New )(Grammar )(Negative (OR (D)(((par e 67 ))to ((var e Neg1 )fabac(var e Neg2 ))))(OR (T)(((par e 67 ))to ((var e Neg1 )fab)))(OR (T)(((par e 67 ))to ((var e Neg1 )fa)))(OR (T)(((par e 67 ))to ((var e Neg1 )f))))(Numeric )(Generic ))()((par e x ))(((assign (var l (0 ))((par e x )))))))))(Node Undriven (0 1 )((Always )((New )(Grammar )(Negative (OR (D)(((par e i ))to ((var e Neg5 )fabac(var e Neg6 )))))(Numeric )(Generic ))()((call (LogAnd 1 )(args (arg False (call (IsEqual 3 )(args (arg (*(par e i ))(*(call (Repl_a_v 4 )(args (arg (call (Repl_a_v 5 )(args (arg (par e x )))))))))))))))(((assign (var l (0 ))((call (LogAnd 1 )(args (arg False (call (IsEqual 3 )(args (arg (*(par e i ))(*(call (Repl_a_v 4 )(args (arg (call (Repl_a_v 5 )(args (arg (par e x ))))))))))))))))))))))
